{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","type","placeholder","onChange","handleChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mUAIaA,EAAO,SAAAC,GAAK,OAErB,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACtB,mCAAML,EAAMI,QAAQE,QACpB,kCAAKN,EAAMI,QAAQG,aCHdC,EAAW,SAAAR,GAAK,OACzB,qBAAKC,UAAU,YAAf,SACKD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OACvB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,UCHlBM,G,MAAY,SAAAX,GAAK,OAC1B,uBACIC,UAAU,SACVW,KAAK,SACLC,YAAab,EAAMa,YACnBC,SAAUd,EAAMe,iBCuDTC,G,wDAvDb,aAAe,IAAD,8BACZ,gBAyBFD,aAAe,SAACE,GACd,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAtBtC,EAAKC,MAAQ,CAEXb,SAAU,GACVU,YAAa,IARH,E,qDAgBd,WAAqB,IAAD,OAClBI,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAAET,SAAUkB,S,oBAe7C,WAGE,MAAkCC,KAAKN,MAA/Bb,EAAR,EAAQA,SAAUU,EAAlB,EAAkBA,YAGZU,EAAmBpB,EAASqB,QAAO,SAAA1B,GAAO,OAAIA,EAAQE,KAAKyB,cAAcC,SAASb,EAAYY,kBAEpG,OAAQ,sBAAK9B,UAAU,MAAf,UAEN,oDAEA,cAAC,EAAD,CACEY,YAAY,kBACZE,aAAca,KAAKb,eAErB,cAAC,EAAD,CAAUN,SAAUoB,W,GAnDRI,cCEHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.e6d4df24.chunk.js","sourcesContent":["import Reaxt from 'react';\n\nimport './card.styles.css';\n\nexport const Card = props =>\n(\n    <div className='card-container'>\n        <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}></img>\n        <h2> {props.monster.name}</h2>\n        <p> {props.monster.email}</p>\n    </div >\n);","import React from 'react';\nimport './card-list.styles.css';\n\nimport { Card } from '../card/card.component';\n\n//What does export mean? The CardList can be imported into other projects = the props parameter is any parameter passed in when importing. Those parameters are being logged to console\nexport const CardList = props => (\n    <div className='card-list'>\n        {props.monsters.map(monster => (\n            <Card key={monster.id} monster={monster} />\n        ))}\n    </div>\n);\n//Style the html in the children tags with the card-list css, which puts each element in grid display\n\n//The CardList will output its parameters to the console and run the HTML code in its child tags\n\n\n/*\nWe break things down into components because it makes it easier to keep information separate and organized\n*/\n","import React from 'react';\n\nimport './search-box.styles.css';\n\n\n//Functional Components don't have states and have overall less functionality than class components. They will take in some props and return some HTML\nexport const SearchBox = props => (\n    <input\n        className='search'\n        type='search'\n        placeholder={props.placeholder}\n        onChange={props.handleChange}\n    />\n);\n\n//The placeholder is a generic prop that gets passed in","import React, { Component } from 'react';\n\nimport { CardList } from './components/card-list/card-list.component';\n\nimport { SearchBox } from './components/search-box/search-box.component';\n\nimport './App.css';\n\n\n//A component class can return HTML\nclass App extends Component {\n  constructor() {\n    super();\n\n    //A state is like a struct \n    //Use setState() to change state info\n    this.state = {\n      //An array of objects representing monsters\n      monsters: [],\n      searchField: ''\n    };\n  }\n\n\n  //Fetching content from a JSON file link - when is componentDidMount called?\n  //What exactly is a response? what does => mean?\n  //JSON file has an array of users and their data\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json()) //return response in json format\n      .then(users => this.setState({ monsters: users })) //place users array into state struct\n  }\n\n\n\n  //e = synthetic event\n  //context of arrow function is app component\n  handleChange = (e) => {\n    this.setState({ searchField: e.target.value });\n  }\n\n\n  //Anytime the state changes the component is re-rendered\n\n  //Return monsters card list html, pass in monsters array as props parameters\n  render() {\n\n    //Pulling values from state\n    const { monsters, searchField } = this.state;\n\n    //Filter monsters according to search box \n    const filteredMonsters = monsters.filter(monster => monster.name.toLowerCase().includes(searchField.toLowerCase()))\n\n    return (<div className='App'>\n\n      <h1> Monsters Rolodex </h1>\n\n      <SearchBox\n        placeholder='search monsters'\n        handleChange={this.handleChange}\n      />\n      <CardList monsters={filteredMonsters} />\n    </div>);\n  }\n}\n\nexport default App;\n\n//e.target.value returns the value of what was typed in the search bar\n//The state's searchField string value is set to that ^\n\n\n/*\nEven if you don't fully understand this - it's still fun and a good way to spend your time. Just go through it\n*/\n\n\n/*\nSynchronous code:\nWait until code finishes running before moving on to the next piece of code\n\nAsynchronous code:\nTakes x amount of time, the following code runs in the meantime\n\nsetState() is asynchronous - it doesn't happen immediately. To log to console effectively, pass a second argument (a callback)\n*/\n\n\n//The state alters the components","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}